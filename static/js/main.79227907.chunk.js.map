{"version":3,"sources":["util.js","components/Products.js","components/Basket.js","App.js","serviceWorker.js","index.js"],"names":["num","Number","toFixed","toLocaleString","Products","productItems","this","props","products","map","product","className","href","id","onClick","e","handleAddToCart","src","sku","alt","title","util","price","Component","Basket","cartItems","length","item","handleRemoveFromCart","class","count","reduce","a","c","alert","App","state","filteredProducts","bind","fetch","then","res","json","data","setState","productAlreadyInCart","forEach","push","localStorage","setItem","JSON","stringify","filter","elm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79227907.chunk.js","sourcesContent":["export default {\r\n    formatCurrency: function(num){\r\n        return 'â‚¹ ' + Number(num.toFixed(2)).toLocaleString() + '  ';\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport util from '../util';\r\nclass Products extends Component {\r\n    render() {\r\n        const productItems = this.props.products.map( (product) => (\r\n            <div className=\"col-md-4\">\r\n                <div className=\"thumbnail text-center background-color: blue\">\r\n                    <a href={`#${product.id}`} onClick={(e)=>this.props.handleAddToCart(e,product)}>\r\n                    <img src={`products/${product.sku}_2.jpg`} alt={product.title} />\r\n                    <p>{product.title}</p>\r\n                    </a>\r\n                    <div>\r\n                        <b>{util.formatCurrency(product.price)}</b>\r\n                        <button className=\"btn btn-primary\" onClick={(e)=>this.props.handleAddToCart(e,product)}>\r\n                            Add To Cart\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ));\r\n            \r\n        return (\r\n            <div className=\"row\">\r\n                {productItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default (Products);","import React, { Component } from 'react'\r\nimport util from '../util'\r\nexport default class Basket extends Component {\r\n    render() {\r\n        const { cartItems } = this.props;\r\n        return (\r\n            <div className=\"alert text-center container-border\">\r\n                <b>Shopping Cart</b>\r\n                <hr />\r\n                {cartItems.length === 0 ? (\r\n                    \"Basket is empty\"\r\n                ) : (\r\n                        <div>\r\n                            You have {cartItems.length} items in the basket. <hr />\r\n                        </div>\r\n                    )}\r\n                {cartItems.length > 0 &&\r\n                    <div>\r\n                        {cartItems.map(item =>\r\n                            <div>\r\n\r\n                                <a href={`#${item.id}`} onClick={(e) => this.props.handleRemoveFromCart(e, item)}>\r\n                                    <img src={`products/${item.sku}_2.jpg`} alt={item.title} class=\"center\" />\r\n\r\n                                    <p>{item.title}</p>\r\n                                </a>\r\n                                <b>Quantity : {item.count / 2}</b>\r\n                                <br />\r\n                                <b>Price : {util.formatCurrency(item.price * (item.count / 2))}</b>\r\n                                <br />\r\n                                <button className=\"btn btn-primary\"\r\n                                    onClick={(e) => this.props.handleRemoveFromCart(e, item)}\r\n                                >Remove</button>\r\n                                <hr />\r\n\r\n                            </div>\r\n                        )}\r\n                        <b>Sub Total : {util.formatCurrency(cartItems.reduce((a, c) => a + c.price * (c.count / 2), 0))} </b>\r\n                        <br />\r\n                        <b>GST(5%) : {util.formatCurrency(cartItems.reduce((a, c) => (a + c.price * (c.count / 2)) * 0.05, 0))} </b>\r\n                        <br />\r\n                        <b>Total : {util.formatCurrency(cartItems.reduce((a, c) => a + c.price * (c.count / 2) + (a + c.price * (c.count / 2)) * 0.05, 0))} </b>\r\n                        <br />\r\n                        <br />\r\n                        <button className=\"btn btn-primary\" onClick={() => alert(\"Checkout needs to be implemented\")}>Checkout</button>\r\n                        <hr />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport Products from \"./components/Products\"\nimport Basket from \"./components/Basket\";\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {products:[], filteredProducts:[], cartItems: []};\n    this.handleAddToCart = this.handleAddToCart.bind(this);\n    this.handleRemoveFromCart = this.handleRemoveFromCart.bind(this);\n  }\n  componentWillMount(){\n    fetch(\"http://localhost:8000/products/\").then(res => res.json())\n    .then(data => this.setState({\n      products : data,\n      filteredProducts: data\n    }));\n    // if(localStorage.getItem('cartItems')){\n    //   this.setState({cartItems: JSON.parse(localStorage.getItem('cartItems'))});\n    // }\n  }\n  handleAddToCart(e,product){\n    this.setState(state => {\n      const cartItems = state.cartItems;\n      let productAlreadyInCart = false;\n      cartItems.forEach(item => {\n        if(item.id === product.id){\n          productAlreadyInCart = true;\n          item.count++;\n        }\n      });\n      if(!productAlreadyInCart){\n        cartItems.push({...product, count:1});\n      }\n      localStorage.setItem(\"cartItems\",JSON.stringify(cartItems));\n      return cartItems;\n    })\n\n  }\n  handleRemoveFromCart(e, item){\n    this.setState(state => {\n      const cartItems = state.cartItems.filter(elm => elm.id !== item.id);\n      localStorage.setItem('cartItems', cartItems);\n      return {cartItems};\n    });\n  }\n  render(){\n    return (\n      <div className=\"container text-center\">\n        <h1>The Klothing Store</h1>\n        <hr/>\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <Products products={this.state.filteredProducts} handleAddToCart={this.handleAddToCart}/>\n          </div>\n          <div className=\"col-md-3\">\n            <Basket cartItems={this.state.cartItems} handleRemoveFromCart={this.handleRemoveFromCart}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}